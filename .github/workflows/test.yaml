name: Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches_ignore: []

jobs:
  formatting:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Checkout submodules
      uses: textbook/git-checkout-submodule-action@2.0.0
    - name: Formatting
      uses: github/super-linter@v4
      env:
        VALIDATE_ALL_CODEBASE: false
        DEFAULT_BRANCH: main
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        VALIDATE_SNAKEMAKE_SNAKEFMT: true
  linting:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Linting
      uses: snakemake/snakemake-github-action@v1.22.0
      with:
        directory: .test
        snakefile: workflow/Snakefile
        args: "--lint"

  run-workflow-linux:
    runs-on: ubuntu-latest
    needs:
      - linting
      - formatting
    steps:
    - name: Checkout repository
      uses: actions/checkout@v1
    - name: Checkout submodules
      uses: textbook/git-checkout-submodule-action@2.0.0
    - name: Test workflow
      uses: snakemake/snakemake-github-action@v1.22.0
      with:
        directory: .test
        snakefile: workflow/Snakefile
        args: "--use-conda --show-failed-logs --cores 2 --conda-cleanup-pkgs cache"
  run-workflow-macos:
    runs-on: macos-latest
    needs:
      - linting
      - formatting
    steps:
    - name: Checkout repository
      uses: actions/checkout@v1
    - name: Checkout submodules
      uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Setup conda
      uses: s-weigand/setup-conda@v1.0.5
      with:
        activate-conda: true
        update-conda: true
        conda-channels: 'bioconda,rdenise,conda-forge,defaults'
    - name: install snakemake and run workflow
      run: |
      conda install snakemake=6.4.1
      snakemake --show-failed-logs --cores 2 --conda-cleanup-pkgs cache
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs:
      - run-workflow-linux
      - run-workflow-macos
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Get Latest Tag
        run: |
            # Get the latest tag, we won't build if it's the current
            git fetch --tags
            latest_tag=$(git tag | tail -1)
            echo "latest_tag=$latest_tag" >> $GITHUB_ENV
      - name: Define Repository Name and Release Version
        run: |
            repo=$(echo "${GITHUB_REPOSITORY/\//-}")
            release=$(cat config/VERSION)
            echo "reponame=$repo" >> $GITHUB_ENV
            echo "release_tag=$release" >> $GITHUB_ENV
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        if: ${{ env.release_tag != env.latest_tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.release_tag }}
          release_name: Release ${{ env.release_tag }}
          draft: false
          prerelease: false